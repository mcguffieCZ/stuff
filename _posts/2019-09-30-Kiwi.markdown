# Booking and Paying Workflow

To book and pay for travel on the kiwi.com platform, follow these steps:

After selecting departure and arrival locations and approximate dates, a selection of travel options is presented. Travel option filters are in the left hand column. The *Book* button is available for each selection.

1. Click the *Book* button for the chosen selection.

   The *Passenger details* page opens. 

2. Provide passenger information, select a baggage option, select an insurance plan, add an additional passenger (if applicable) and verify contact details.

   > **Note:** Total travel cost is dynamically presented in the right hand column as below. ![travelcost](\stuff\assets\images\travelcost.png){:height="50%" width="50%"} 

   > **Note:** In the case there are special baggage conditions due to travel selection, this will be presented on the *Passenger details* page. Click **Learn more** to see condition details and further instructions.

   Click *Continue*.

   The *Customise your trip* page opens.

3. Click *From (value)* to add or remove trip customizations and click *Continue*.

   > **Note:** Click **Learn more** to see customization details.

   The *Customer care* page opens.

4. Select Customer Care level and click on the *Continue with...* button for the desired column.

   The *Overview & payment* page opens.

5. Confirm the Overview information and Invoice details.

   > **Note:** Click the **Edit invoice details** radio button to change invoice details.

6. Provide payment details and click *Pay (value)* to process payment.

   > **Note:** Click the **Redeem promo code** link above the payment window to apply the discount.

   



# Kiwi.com promocodes API

FORMAT: 1A
HOST: https://promocodes.kiwi.com

Kiwi.com promocodes API is accessible only via https for authorized users under given set of IP addresses. This API is connected directly to our backend and it is the recommended  way how to operate with promocodes.

## Group Promocodes

## /promocodes

Resource for retrieving information about promocodes and creating new ones.

## GET

Returns list of all promocodes in our system with some additional information.

**Parameters of every promocode in body response:**

- Code: string, unique alphanumeric code
- BID: integer, booking ID of connected booking, why promocode was created (some problem with previous booking or on which booking it was used), can be null
- Used: boolean, true if promocode was used
- Amount: integer, the amount the promocode can cover, always in EUR
- Email: string, email of connected user account the promocode was created for or used by, can be null

- Response 200 (json application)

  - Body

    ```
    {
      "promocodes":[
        {
          "code":"AAAAQ",
          "bid":null,
          "used":false,
          "amount":10.0,
          "email":"some@mail.com"
        },
        {
          "code":"AAAAR",
          "bid":123456,
          "used":true,
          "amount":10.0,
          "email": null
        }
      ]
    }
    ```

- Response 401 (text/plain)

  ```
  You are not authorized for this operation.
  ```

## PUT

ToDo: Write documentation for creating one promocode. A user should provide the API with the same details that are returned for each promocode in the GET method above.
In the response, the API returns created promocode with all its details. New promocodes are not used. Parameters that can be null, might not be passed to the API.

Creates promocode(s) in our system with some additional information.

**Parameters of every promocode:**

- Code: string, unique alphanumeric code
- BID: integer, booking ID of connected booking, why promocode was created (some problem with previous booking or on which booking it was used)
- Used: boolean, true if promocode was used
- Amount: integer, the amount the promocode can cover, always in EUR
- Email: string, email of connected user account the promocode was created for or used by

- Request (json application)

  - Body

    ```
    {
      "code":"AAAAQ",
          "bid":123456,
          "used":false,
          "amount":10.0,
          "email":"some@mail.com"
          }
    ```

- Response 200 (json application)

  - Body

    ```
    {
          "code":"AAAAQ",
          "bid":123456,
          "used":false,
          "amount":10.0,
          "email":"some@mail.com"
          }
    ```